#:kivy 1.6.0
#:import SlideTransition kivy.uix.screenmanager.SlideTransition 
#:set COLOR_HIGHLIGHT (0.788235294, 0.643137255, 1)
#:set COLOR_BACKGROUND (0.349019608, 0.082352941, 0.658823529)
#:set COLOR_BACKGROUND_A50 (0.349019608, 0.082352941, 0.658823529, .5)
#:set COLOR_BORDER (0.643137255, 0.160784314, 1)
#:set COLOR_BORDER_A50 (0.643137255, 0.160784314, 1, .5)
#:set COLOR_BORDER_A75 (0.643137255, 0.160784314, 1, .75)
#:set COLOR_HIGHLIGHT_A50 (0.788235294, 0.643137255, 1, .5)
#:set COLOR_HIGHLIGHT_A100 (0.788235294, 0.643137255, 1, 1.0)
#:set COLOR_BACKGROUND_A100 (0.349019608, 0.082352941, 0.658823529, 1.0)
#:set COLOR_BORDER_A100 (0.643137255, 0.160784314, 1, 1.0)

TestGame:

<TestGame>:
	gameworld: gameworld
	pos: root.pos
	current_level: self.current_level
	current_lives: self.current_lives
	size: root.size
	state: gameworld.state
	number_of_asteroids: gameworld.number_of_asteroids
	number_of_probes: gameworld.number_of_probes
	number_of_enemies: gameworld.number_of_enemies
	number_of_enemies_to_spawn: gameworld.number_of_enemies_to_spawn
	do_asteroids: gameworld.do_asteroids
	do_probes: gameworld.do_probes
	do_enemies: gameworld.do_enemies
	player_character: player_character
	GameWorld:
		id: gameworld
		player_character: player_character
		music_controller: music_controller
		asteroid_system: asteroid_system
		probe_system: probe_system
		ship_ai_system: ship_ai_system
		asteroid_level: asteroid_level
		current_character_weapons_locked: player_character.weapons_locked
		number_of_asteroids: self.asteroid_system.number_of_asteroids
		number_of_probes: self.probe_system.number_of_probes
		number_of_enemies: self.ship_ai_system.number_of_enemies
		number_of_enemies_to_spawn: self.asteroid_level.number_of_enemies_to_spawn
		do_asteroids: self.asteroid_level.do_asteroids
		do_probes: self.asteroid_level.do_probes
		do_enemies: self.asteroid_level.do_enemies
		current_health: self.player_character.current_health
		total_health: self.player_character.total_health
		gamescreenmanager: gamescreenmanager
		MusicController:
			id: music_controller
		GameView:
			entity_to_focus: root.player_character.current_character_id
			gameworld: root.gameworld
			pos: root.pos
			size: root.size
			camera_speed_multiplier: 4.0
		GameMap:
			gameworld: root.gameworld
		QuadRenderer:
			system_id: 'background_renderer'
	    	render_information_from: 'position'
	    	context_information_from: 'position'
	    	image_mode: 'atlas'
	    	do_scale: True
			gameworld: root.gameworld
		QuadTreePointRenderer:
			system_id: 'quadtree_renderer'
			render_information_from: 'position'
			gameworld: root.gameworld
		GameSystem:
			system_id: 'position'
			gameworld: root.gameworld
		ProjectileSystem:
			system_id: 'projectile_system'
			gameworld: root.gameworld
		ShipSystem:
			system_id: 'ship_system'
			gameworld: root.gameworld
		ShipAISystem:
			id: ship_ai_system
			system_id: 'ship_ai_system'
			gameworld: root.gameworld
		ProbeSystem:
			id: probe_system
			system_id: 'probe_system'
			gameworld: root.gameworld
		PlayerCharacter:
			id: player_character
			system_id: 'player_character'
			gameworld: root.gameworld
			current_character_id: self.current_character_id
			current_bullet_ammo: self.current_bullet_ammo
			current_rocket_ammo: self.current_rocket_ammo
		AsteroidSystem:
			id: asteroid_system
			gameworld: root.gameworld
		CymunkPhysics:
			gameworld: root.gameworld
		PhysicsRenderer:
			gameworld: root.gameworld
		PhysicsPointRenderer:
			gameworld: root.gameworld
		QuadRenderer:
			gameworld: root.gameworld
			system_id: 'lighting_renderer'
			render_information_from: 'probe_system'
	    	context_information_from: 'probe_system'
	    	do_color: True
		ParticleManager:
			gameworld: root.gameworld
			size: root.size
			max_number_particles: 30
			pos: root.pos
		ParticleManager:
			system_id: 'point_particle_manager'
			gameworld: root.gameworld
			max_number_particles: 20
			render_information_from: 'physics_point_renderer'
			size: root.size
			pos: root.pos
		AsteroidsLevel:
			id: asteroid_level
			gameworld: root.gameworld
		SoundSystem:
			system_id: 'sound_system'
			gameworld: root.gameworld
		GameScreenManager:
			id: gamescreenmanager
			gameworld: root.gameworld
			transition: SlideTransition()
			current_level: root.current_level
			current_lives: root.current_lives
			number_of_asteroids: self.gameworld.number_of_asteroids
			number_of_probes: self.gameworld.number_of_probes
			number_of_enemies: max(self.gameworld.number_of_enemies, self.gameworld.number_of_enemies_to_spawn)
			weapons_locked: self.gameworld.current_character_weapons_locked
			current_health: self.gameworld.current_health
			total_health: self.gameworld.total_health
			current_rocket_ammo: player_character.current_rocket_ammo
			current_bullet_ammo: player_character.current_bullet_ammo
			pos: root.pos
			size: root.size

<DebugPanel>:
    Label:
        pos: root.pos
        size: root.size
        font_size: root.size[1]*.5
        halign: 'center'
        valign: 'middle'
        color: (1,1,1,1)
        text: 'FPS: ' + root.fps if root.fps != None else 'FPS:'

<GameScreenManager>:
	current: 'main_menu'
	number_of_asteroids: self.number_of_asteroids
	number_of_probes: self.number_of_probes
	number_of_enemies: self.number_of_enemies
	gameworld: root.gameworld
	current_level: self.current_level
	current_lives: self.current_lives
	weapons_locked: self.weapons_locked
	current_health: self.current_health
	current_rocket_ammo: self.current_rocket_ammo
	current_bullet_ammo: self.current_bullet_ammo
	total_health: self.total_health
	MainMenuScreen:
		gameworld: root.gameworld
	MainGameScreen:
		gameworld: root.gameworld
		current_rocket_ammo: root.current_rocket_ammo
		current_bullet_ammo: root.current_bullet_ammo
		number_of_asteroids: root.number_of_asteroids
		number_of_enemies: root.number_of_enemies
		number_of_probes: root.number_of_probes
		weapons_locked: root.weapons_locked
		current_health: root.current_health
		total_health: root.total_health
	ChooseCharacterScreen:
		gameworld: root.gameworld
		current_level: root.current_level
		current_lives: root.current_lives
	GameOverScreen:
		gameworld: root.gameworld

<MainMenuScreen>:
	BoxLayout:
		size_hint: (.5, .5)
		pos_hint: {'x':.25, 'y':.25}
		orientation: 'vertical'
		YACSButton:
			text: 'PLAY GAME'
			on_press: root.gameworld.state = 'choose_character'

<GameOverScreen>:
	BoxLayout:
		size_hint: (.4, .6)
		pos_hint: {'x':.3, 'y': .2}
		orientation: 'vertical'
		YACSLabel:
			text: 'GAME OVER'
		YACSButton:
			text: 'RESTART'
			on_press: root.gameworld.state = 'choose_character'

<CharacterInputPanel>:
	icon_placement_pos: root.pos[0] + root.size[0]/2., root.pos[1] + root.size[1]*.75
	canvas:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle: 
			pos: self.pos
			size: self.size
	canvas.after:
		Color:
			rgb: COLOR_BORDER
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.2, self.pos[1], self.pos[0] + self.size[0] *.2, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.2, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.2)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.4, self.pos[1], self.pos[0] + self.size[0] *.4, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.4, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.4)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.6, self.pos[1], self.pos[0] + self.size[0] *.6, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.6, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.6)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.8, self.pos[1], self.pos[0] + self.size[0] *.8, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] +  self.size[1] *.8, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.8) 
		Color:
			rgb: COLOR_HIGHLIGHT
		Line:
			width: 2.
			points: (self.center[0], self.pos[1], self.center[0], self.pos[1] + self.size[1]) if self.current_touch == [] else (self.current_touch[0], self.pos[1], self.current_touch[0], self.pos[1] + self.size[1])
		Line:
			width: 2.
			points: (self.pos[0], self.size[1] *.33, self.pos[0] + self.size[0], self.size[1] *.33) if self.current_touch == [] else (self.pos[0], self.current_touch[1], self.pos[0] + self.size[0], self.current_touch[1])
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'
	Image:
		source: 'assets/ui_elements/forward-shippanel-icon.png'
		size: self.texture_size
		pos: int(root.icon_placement_pos[0] - self.size[0]*.5), int(root.icon_placement_pos[1] - self.size[1]*.5)
	Image:
		source: 'assets/ui_elements/left-shippanel-icon.png'
		size: self.texture_size
		pos: int(root.icon_placement_pos[0] - self.size[0]*1.2), int(root.icon_placement_pos[1] - self.size[1]*1.2)
	Image:
		source: 'assets/ui_elements/right-shippanel-icon.png'
		size: self.texture_size
		pos: int(root.icon_placement_pos[0] + self.size[0]*.2), int(root.icon_placement_pos[1] - self.size[1]*1.2)

<YACSLabelNoBox>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	shorten: True
	font_size: 16

<YACSLabel>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	shorten: True
	font_size: 16
	canvas.before:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle:
			size: root.size
			pos: root.pos
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'

<-YACSButtonCircle>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	color: COLOR_BORDER if self.state == 'normal' else COLOR_HIGHLIGHT
	canvas.before:
		Color: 
			rgba: COLOR_BORDER_A75
		Ellipse:
			size: root.size
			pos: root.pos
		Color:
			rgba: COLOR_BACKGROUND_A50 if self.state == 'normal' else COLOR_HIGHLIGHT_A50
		Ellipse:
			size: root.size[0]*.9, root.size[1]*.9
			pos: root.pos[0]*1.05, root.pos[1]*1.05
	Label:
		text: root.text
		font_name: root.font_name
		font_size: root.font_size
		pos: root.pos
		size: root.size

<-YACSButton>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	color: COLOR_BORDER if self.state == 'normal' else COLOR_HIGHLIGHT
	canvas.before:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle:
			size: root.size
			pos: root.pos
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'
	Label:
		text: root.text
		font_name: root.font_name
		font_size: root.font_size
		pos: root.pos
		size: root.size

<ToggleWeaponPanel>:
	bullet_button: bullet_button
	rocket_button: rocket_button
	current_bullet_ammo: self.current_bullet_ammo
	current_rocket_ammo: self.current_rocket_ammo
	size_of_label: max(bullet_button.label_texture_size[0], rocket_button.label_texture_size[0])
	BoxLayout:
		orientation: 'vertical'
		spacing: 10
		padding: 10
		size: root.size
		pos: root.pos
		size_hint: (None, None)
		WeaponToggleButton:
			id: bullet_button
			label_texture_size: self.label_texture_size
			on_press: root.toggle_weapon(self.state, self.weapon_type)
			background_normal: 'assets/ui_elements/bulleticon-normal.png'
			background_down: 'assets/ui_elements/bulleticon-down.png'
			weapon_type: '_bullet'
			ammo_amount: root.current_bullet_ammo
			state: 'down'
		WeaponToggleButton:
			id: rocket_button
			on_press: root.toggle_weapon(self.state, self.weapon_type)
			label_texture_size: self.label_texture_size
			weapon_type: '_rocket'
			background_normal: 'assets/ui_elements/rocketicon-normal.png'
			background_down: 'assets/ui_elements/rocketicon-down.png'
			ammo_amount: root.current_rocket_ammo
			
<-WeaponToggleButton>:
	group: 'weapons'
	label_texture_size: w_label.texture_size
	canvas:
		Color:
			rgba: COLOR_HIGHLIGHT_A50 if root.state == 'down' else COLOR_BACKGROUND_A50
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'
	Image:
		size_hint: None, None
		source: root.background_normal if root.state == 'normal' else root.background_down
		size: self.texture_size
		pos: int(root.pos[0] + (root.size[0]*(2./3.) - self.size[0])/2.), int(root.pos[1] + (root.size[1]-self.size[1])/2.)
	YACSLabelNoBox:
		id: w_label
		text: str(root.ammo_amount)
		color: COLOR_HIGHLIGHT_A50 if root.state == 'down' else COLOR_BACKGROUND_A50
		pos: root.pos[0] + root.size[0]/2., root.pos[1]
		size: root.size[0]/2., root.size[1]

<ObjectivesPanel>:
	layout: layout
	number_of_asteroids: self.number_of_asteroids
	number_of_probes: self.number_of_probes
	number_of_enemies: self.number_of_enemies
	size_of_label: max([label.label_texture_size for label in self.layout.children])
	StackLayout:
		id: layout
		pos: root.pos
		size: root.size
		spacing: 8.0
		ObjectiveLabel:
			size_hint: (1., .3)
			name: 'asteroids'
			label_texture_size: self.label_texture_size
			objective_image: 'assets/ui_elements/asteroid-icon.png'
			objective_amount: root.number_of_asteroids
		ObjectiveLabel:
			name: 'probes'
			size_hint: (1., .3)
			label_texture_size: self.label_texture_size
			objective_image: 'assets/ui_elements/probe-icon.png'
			objective_amount: root.number_of_probes
		ObjectiveLabel:
			name: 'enemies'
			size_hint: (1., .3)
			label_texture_size: self.label_texture_size
			objective_image: 'assets/ui_elements/ship-icon.png'
			objective_amount: root.number_of_enemies
	
<ObjectiveLabel>
	label_texture_size: o_label.texture_size[0]
	name: self.name
	Image:
		size_hint: None, None
		source: root.objective_image
		size: self.texture_size
		pos: int(root.pos[0] + (root.size[0]/2. - self.size[0])/2.), int(root.pos[1] + (root.size[1]-self.size[1])/2.)
	YACSLabelNoBox:
		id: o_label
		text: str(root.objective_amount) if root.objective_amount != None else 'None'
		color: COLOR_HIGHLIGHT_A50
		pos: root.pos[0] + root.size[0]/2., root.pos[1]
		size: root.size[0]/2., root.size[1]

<MainGameScreen>:
	gameworld: self.gameworld
	number_of_asteroids: self.number_of_asteroids
	number_of_enemies: self.number_of_enemies
	number_of_probes: self.number_of_probes
	fire_button: fire_button
	weapons_locked: self.weapons_locked
	current_health: self.current_health
	current_bullet_ammo: self.current_bullet_ammo
	current_rocket_ammo: self.current_rocket_ammo
	total_health: self.total_health
	objective_panel: objective_panel
	FloatLayout:
		size: root.size
		pos: root.pos
		ObjectivesPanel:
			id: objective_panel
			gameworld: root.gameworld
			number_of_asteroids: root.number_of_asteroids
			number_of_enemies: root.number_of_enemies
			number_of_probes: root.number_of_probes
			size_of_label: self.size_of_label
			size_hint_x_calc: (self.size_of_label + 32. + root.size[0]*.05)/root.size[0]
			size_hint: (self.size_hint_x_calc, min(.2, 120./root.size[1]))
			pos_hint: {'x': 1.0 - self.size_hint[0], 'y': .99 - self.size_hint[1]}
		YACSButtonCircle:
			id: fire_button
			weapons_locked: root.weapons_locked
			state: 'down' if self.weapons_locked else 'normal'
			pos_hint: {'x': .025, 'y': .025}
			size_hint_x: min(.20, 200./root.size[0])
			size_hint_y: (self.size_hint_x*root.size[0])/root.size[1]
			text: 'FIRE'
			font_size: 16
			on_state: root.gameworld.systems['player_character'].spawn_projectile(self.state)
		ToggleWeaponPanel:
			current_bullet_ammo: root.current_bullet_ammo
			current_rocket_ammo: root.current_rocket_ammo
			size_of_label: self.size_of_label
			size_hint_x_calc: (self.size_of_label + 128. )/root.size[0]
			size_hint: (self.size_hint_x_calc, min(.20, 150./root.size[1]))
			pos_hint: {'x': .025, 'y': .05 + root.fire_button.size[1]/root.height}
			on_weapon_type: root.toggle_weapons(self.weapon_type)
		CharacterInputPanel:
			gameworld: root.gameworld
			size_hint_x: min(.20, 250./root.size[0])
			size_hint_y: (self.size_hint_x*root.size[0])/root.size[1]
			pos_hint: {'x': .985-self.size_hint_x, 'y': .025}
		DebugPanel:
			pos: root.size[0] * .5, 0
			size: (25, 25)
			size_hint: (None, None)
		HealthBar:
			current_health: root.current_health
			total_health: root.total_health
			size_hint: (min(.25, 300./root.size[0]), min(.1, 75./root.size[1]))
			pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}

<ChooseCharacterScreen>:
	gameworld: self.gameworld
	choose_character: choose_character
	current_ship: choose_character.current_ship
	current_level: root.current_level
	current_lives: root.current_lives
	FloatLayout:
		pos: root.pos
		size: root.size
		YACSLabel:
			pos_hint: {'x': .3, 'y':.85}
			size_hint: (.4, .1)
			text: 'Choose Your Ship:'
		YACSLabelNoBox:
			text: 'Current Level: ' + str(root.current_level)
			pos_hint: {'x': .3, 'y':.80}
			size_hint: (.4, .03)
		YACSLabelNoBox:
			text: 'Current Lives: ' + str(root.current_lives)
			pos_hint: {'x': .3, 'y':.76}
			size_hint: (.4, .03)
		ChooseCharacterWidget:
			id: choose_character
			gameworld: root.gameworld
			pos_hint: {'x': .2, 'y':.2}
			size_hint: (.6, .55)
			center: root.center
			size: root.size[0]*.6, root.size[1]*.6
		YACSButton:
			pos_hint: {'x': .3, 'y': .05}
			size_hint: (.4, .1)
			text: 'Play Game'
			on_press: root.gameworld.parent.start_round(root.current_ship)

<StatBox>:
	stat_name: self.stat_name
	stat_value: self.stat_value
	orientation: 'horizontal'
	YACSLabelNoBox:
		text: root.stat_name
		size_hint: (.5, 1.0)
		color: COLOR_HIGHLIGHT_A100
	YACSLabelNoBox:
		text: root.stat_value
		size_hint: (.5, 1.0)
		color: COLOR_BORDER_A100

<HealthBar>:
	current_health: root.current_health
	total_health: root.total_health
	health_percentage: self.health_percentage
	orientation: 'vertical'
	padding: 10
	Widget:
		size_hint: (1.0, 1.0)
		canvas:
			Color:
				rgba: COLOR_BACKGROUND_A50
			Rectangle: 
				pos: self.pos
				size: self.size
			Color:
				rgba: COLOR_HIGHLIGHT_A50
			Rectangle:
				pos: self.pos
				size: ((root.health_percentage)*self.size[0], self.size[1])
			Color:
				rgba: COLOR_BORDER_A50
			Line:
				width: 2.
				rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
				joint: 'bevel'


<ChooseCharacterWidget>:
	pos: root.pos
	size: root.size
	canvas:
		Color:
			rgb: COLOR_BACKGROUND
		Rectangle:
			pos: self.pos
			size: self.size
		Color:
			rgb: COLOR_BORDER
		Line:
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			width: 2.
	BoxLayout: 
		size: root.size
		pos: root.pos
		orientation: 'vertical'
		YACSLabelNoBox:
			text: 'Current Ship: ' + root.ship_dict['name'] if root.ship_dict else 'Current Ship: None'
			size_hint: (.8, .2)
			pos_hint: {'x': .1, 'y': .8}
		Image:
			size_hint: (None, None)
			pos_hint: {'x': .5 - self.size[0]/2./root.size[0]}
			source: root.ship_dict['texture'] if root.ship_dict else None
		BoxLayout:
			orientation: 'horizontal'
			size_hint: (.8, .2)
			pos_hint: {'x': .1}
			YACSButton:
				text: 'Prev'
				on_press: root.get_prev_ship()
				size_hint: (.5, 1.0)
			YACSButton:
				text: 'Next'
				size_hint: (.5, 1.0)
				on_press: root.get_next_ship()
		BoxLayout:
			orientation: 'horizontal'
			size_hint: (.8, .5)
			pos_hint: {'x': .1}
			BoxLayout:
				orientation: 'vertical'
				size_hint: (.5, 1.)
				StatBox:
					stat_name: 'health'
					stat_value: str(root.ship_dict['health']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'mass'
					stat_value: str(root.ship_dict['mass']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'weapons'
					stat_value: str(root.ship_dict['num_weapons']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'caliber'
					stat_value: str(root.ship_dict['caliber']) if root.ship_dict else 'Default'
			BoxLayout:
				orientation: 'vertical'
				size_hint: (.5, 1.)
				StatBox:
					stat_name: 'max speed'
					stat_value: str(root.ship_dict['max_speed']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'turn speed'
					stat_value: str(root.ship_dict['max_turn_speed']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'accel'
					stat_value: str(root.ship_dict['accel']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'turn accel'
					stat_value: str(root.ship_dict['angular_accel']) if root.ship_dict else 'Default'


				

	
	



